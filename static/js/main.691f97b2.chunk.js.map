{"version":3,"sources":["logoHenry.png","components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSearch","useState","city","setCity","onSubmit","e","preventDefault","type","placeholder","value","className","onChange","target","require","Nav","href","src","Logo","alt","Card","min","max","name","img","onClose","description","wind","humidity","clouds","visibility","id","onClick","width","height","Swal","fire","buttonsStyling","customClass","header","popup","confirmButton","html","confirmButtonText","Cards","cities","map","c","key","uniqid","App","setCities","ciudad","fetch","then","r","json","recurso","console","log","undefined","main","Math","round","temp_min","temp_max","weather","icon","speed","temp","all","latitud","coord","lat","longitud","lon","oldCities","alert","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.691f97b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoHenry.8d4e96cc.png\";","import React, { useState } from \"react\";\r\nimport './Nav.css'\r\n\r\nexport default function SearchBar({onSearch}) {\r\n  const [city, setCity] = useState(\"\");\r\n  return (\r\n    <form onSubmit={(e) => {\r\n      e.preventDefault();\r\n      onSearch(city);\r\n    }}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"busqueda...\"\r\n        value={city}\r\n        className='search'\r\n        onChange={e => setCity(e.target.value)}\r\n      />\r\n      <input type=\"submit\" className='button' value=\"Buscar\" />\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Logo from '../logoHenry.png'\r\nimport SearchBar from './SearchBar.jsx';\r\nimport './Nav.css';\r\n\r\nrequire('./Nav.css')\r\n\r\nfunction Nav({onSearch}) {\r\n  return (\r\n  <div className='Barras'>\r\n    <nav className=\"navbar navbar-light\">\r\n      <div className='responsive'>\r\n        <a className=\"navbar-brand\" href=\"#!\">\r\n          <img src={Logo} alt=\"Henry\"/>\r\n        </a>\r\n        <p>Weather App</p>\r\n      </div>\r\n      <div className='izquierda'>\r\n      <a className=\"navbar-brand\" href=\"#!\">\r\n          <img src={Logo} alt=\"Henry\"/>\r\n        </a>\r\n      </div>\r\n      <div className='medio'>\r\n       <SearchBar onSearch={onSearch}/>\r\n      </div> \r\n      <div className='derecha'>\r\n      <p>Henry - Weather App</p>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport './Card.css';\r\n\r\nexport default function Card ({min, max, name, img, onClose,description,wind,humidity,clouds,visibility}) {\r\n\r\n  const handleInfo = () => {\r\n    Swal.fire({\r\n      buttonsStyling: false,\r\n      customClass:{\r\n        header: 'customHeader',\r\n        popup: 'customPopup',\r\n        confirmButton: 'button'\r\n      },\r\n      html: `<h2 class='titulo'>${name}</h2>\r\n      <p class='parrafo'>viento: ${wind}m/s</p>\r\n      <p class='parrafo'>Humedad: ${humidity}%</p>\r\n      <p class='parrafo'>nubosidad: ${clouds}%</p>\r\n      <p class='parrafo'>visibilidad: ${visibility}km</p>`,\r\n      confirmButtonText: 'Cool'\r\n    })\r\n  }\r\n\r\n    return (\r\n      <div className=\"card\">  \r\n        <div id=\"closeIcon\" className=\"row\">\r\n            <button onClick={onClose} className=\"btn btn-sm btn-danger close-button\">X</button>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{name}</h5>\r\n          <p>{description}</p>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\r\n              <p>Min</p>\r\n              <p>{min}°</p>\r\n            </div>\r\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\r\n              <p>Max</p>\r\n              <p>{max}°</p>  \r\n            </div>\r\n            <div className=\"col-sm-4 col-md-4 col-lg-4\">\r\n              <img className=\"iconoClima\" src={\"http://openweathermap.org/img/wn/\"+img+\"@2x.png\"} width=\"80\" height=\"80\" alt=\"\" />\r\n            </div>\r\n          </div>\r\n          <button className='button' onClick={handleInfo}>mas info</button>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './Cards.css';\r\n\r\nimport Card from './Card.jsx';\r\n\r\nexport default function Cards({cities, onClose}) {\r\n  if(cities){\r\n    return (\r\n      <>\r\n      <div>\r\n        <h1>¿Como esta el clima hoy en...?</h1>\r\n        <h4>¡puedes buscar por ciudad, provincia o pais!</h4>\r\n      </div>\r\n      <div className='cards'>\r\n        \r\n        {cities.map((c,key) => <Card\r\n            key={key}\r\n            uniqid={c.uniqid}\r\n            max={c.max}\r\n            min={c.min}\r\n            name={c.name}\r\n            img={c.img}\r\n            onClose={() => onClose(c.uniqid)}\r\n            id={c.id}\r\n            wind={c.wind}\r\n            humidity={c.humidity} \r\n            clouds={c.clouds}\r\n            visibility={c.visibility}\r\n            description={c.description}\r\n          /> )}\r\n      </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return(\r\n      <div>Sin ciudades</div>\r\n    )\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport uniqid from 'uniqid'\r\nimport './App.css';\r\nimport Nav from './components/Nav.jsx'\r\nimport Cards from './components/Cards.jsx';\r\n\r\n//uniqid genera id aleatorio\r\n\r\nfunction App() {\r\n\r\n  const [cities, setCities] = useState([]);\r\n\r\n  function onSearch(ciudad) {\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&units=metric&lang=es&appid=5300283ec29db600e98af99dc934b85a`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        console.log(recurso)\r\n        if(recurso.main !== undefined){\r\n          const ciudad = {\r\n            uniqid: uniqid(\"mati-\"),\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            humidity: recurso.main.humidity,\r\n            description:recurso.weather[0].description,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            visibility: Math.round(recurso.visibility/1000),\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    function onClose(uniqid) {\r\n      setCities(oldCities => oldCities.filter(c => c.uniqid !== uniqid));\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Nav onSearch={onSearch}/>\r\n        <Cards cities={cities} onClose={onClose}/>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <div className='all'>\r\n      <App/>  \r\n    </div>,\r\n document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}